import time
import sys
import os
import requests
import traceback
import threading
import signal
import atexit
import random
from datetime import datetime
from rich.progress import Progress, BarColumn, TextColumn, TimeElapsedColumn
from colorama import init, Fore, Style
from telebot import TeleBot
import telebot
from config import bot, BOT_TOKEN, BOT_USERNAME, BOT_ID, BOT_OWNER, logger
import help_lan
import language
import start
import help_languages.help_forward
import data.data
import ban_sticker_pack.ban_sticker_pack
import joinapproval
import mute
import privacy.privacy
import basics.del_feature
import user_logs.user_logs
import basics.get_ids 
import private_fungtions.connections.connection
import private_fungtions.pbans
import cleancommand
import cleanservice
import purges
import namechanger
import bans
import kick
import admins
import rules
import warns
import vc
import topics
import notes
import chatting
import welcome
import reports
import broadcasting.bcast
import locks


init(autoreset=True)

def get_bot_info(token):
    """Extract bot ID from token and get username from Telegram API if not provided"""
    try:
        bot_id = BOT_ID if BOT_ID else token.split(':')[0]
        bot_username = BOT_USERNAME
        
        if not bot_username or not bot_id:
            response = requests.get(f'https://api.telegram.org/bot{token}/getMe').json()
            if response.get('ok'):
                bot_username = f"@{response['result']['username']}" if not bot_username else bot_username
                bot_id = response['result']['id'] if not bot_id else bot_id
            else:
                raise ValueError("‚Ä¢ F·¥Ä…™ ü·¥á·¥Ö T·¥è G·¥á·¥õ B·¥è·¥õ I…¥“ì·¥è F Ä·¥è·¥ç T·¥á ü·¥á…¢ Ä·¥Ä·¥ç API")
        
        return {
            'id': bot_id,
            'username': bot_username
        }
    except Exception as e:
        logger.error(f"‚Ä¢ B·¥è·¥õ …™…¥“ì·¥è ·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ…™·¥è…¥ “ì·¥Ä…™ ü·¥á·¥Ö  ‚û† {e}")
        raise

try:
    bot_info = get_bot_info(BOT_TOKEN)
    BOT_USERNAME = bot_info['username']
    BOT_ID = bot_info['id']
except Exception as e:
    logger.error(f"‚Ä¢ F·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …™…¥…™·¥õ…™·¥Ä ü…™·¥¢·¥á  ô·¥è·¥õ …™…¥“ì·¥è ‚û† {e}")
    print(f"{Fore.RED}‚Ä¢ FATAL ERROR ‚û† C·¥è·¥ú ü·¥Ö …¥·¥è·¥õ …™…¥…™·¥õ…™·¥Ä ü…™·¥¢·¥á  ô·¥è·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥. {Style.RESET_ALL}")
    sys.exit(1)

start_time = None
running = True
uptime_thread = None

ASCII_HEADER = f"""
{Fore.MAGENTA}{Style.BRIGHT}‚î≥‚îÅ‚îì ‚î≥‚îÅ‚îì ‚î≥‚îÅ‚îì
‚î£‚îÅ‚î´ ‚î£‚îÅ‚î´ ‚î£‚î≥‚î´
‚î£‚îª‚î´ ‚î£‚îª‚î´ ‚î£‚îª‚î´
‚îª ‚îª ‚îª ‚îª ‚îª ‚îª{Style.RESET_ALL}
{Fore.CYAN}\nüî• {BOT_USERNAME} by {BOT_OWNER} üî•{Style.RESET_ALL}
\n\n"""

def print_stylish(text: str, color: str = Fore.CYAN, bold: bool = True):
    """Print text with style and flair"""
    style = Style.BRIGHT if bold else Style.NORMAL
    print(f"{color}{style}{text}{Style.RESET_ALL}")

def display_uptime():
    """Show a slick live uptime counter"""
    global running
    with Progress(
        TextColumn(f"{Fore.MAGENTA}[progress.description]{{task.description}}{Style.RESET_ALL}"),
        BarColumn(bar_width=50),
        TimeElapsedColumn(),
        transient=False
    ) as progress:
        task_id = progress.add_task(f"{BOT_USERNAME} R·¥ú…¥…¥…™…¥…¢ F Ä·¥è·¥ç ‚û†", total=None)
        seconds = 0
        while running:
            seconds += 1
            if seconds < 60:
                uptime_str = f"{seconds} second{'s' if seconds != 1 else ''}"
            elif seconds < 3600:
                minutes = seconds // 60
                uptime_str = f"{minutes} minute{'s' if minutes != 1 else ''}"
            elif seconds < 86400:
                hours = seconds // 3600
                uptime_str = f"{hours} hour{'s' if hours != 1 else ''}"
            elif seconds < 31536000:
                days = seconds // 86400
                uptime_str = f"{days} day{'s' if days != 1 else ''}"
            else:
                years = seconds // 31536000
                uptime_str = f"{years} year{'s' if years != 1 else ''}"
            progress.update(task_id, description=f"{BOT_USERNAME} R·¥ú…¥…¥…™…¥…¢ F Ä·¥è·¥ç ‚û† {uptime_str}")
            time.sleep(1)

def handle_shutdown(signum, frame):
    """Gracefully shut down with style"""
    global running
    print_stylish("üõë S ú·¥ú·¥õ·¥õ…™…¥…¢ D·¥è·¥°…¥... P·¥á·¥Ä·¥Ñ·¥á O·¥ú·¥õ.", Fore.RED)
    running = False
    try:
        bot.stop_polling()
        print_stylish("¬ª P·¥è ü ü…™…¥…¢ S·¥õ·¥è·¥ò·¥ò·¥á·¥Ö C ü·¥á·¥Ä…¥ ü è. ¬´ üßπ", Fore.GREEN)
    except Exception as e:
        logger.error(f"{Fore.RED} S ú·¥ú·¥õ·¥Ö·¥è·¥°…¥ E Ä Ä·¥è Ä ‚û† {e}\n{traceback.format_exc()}\nT…™·¥ç·¥ás·¥õ·¥Ä·¥ç·¥ò ‚û† {datetime.now()}{Style.RESET_ALL}")
        print_stylish(f"F·¥Ä…™ ü·¥á·¥Ö T·¥è S·¥õ·¥è·¥ò P·¥è ü ü…™…¥…¢ ‚û† {e} üòø", Fore.RED)
    sys.exit(0)

def cleanup():
    """Clean up like a pro"""
    global running, uptime_thread
    print_stylish("üßπ C ü·¥á·¥Ä…¥…™…¥…¢ U·¥ò R·¥ás·¥è·¥ú Ä·¥Ñ·¥ás...", Fore.YELLOW)
    running = False
    if uptime_thread and uptime_thread.is_alive():
        uptime_thread.join()
    print_stylish("C ü·¥á·¥Ä…¥·¥ú·¥ò C·¥è·¥ç·¥ò ü·¥á·¥õ·¥á! üèÅ", Fore.GREEN)

def start_bot():
    """Launch the Telegram bot with max swagger"""
    global start_time, uptime_thread, running
    os.system('cls' if os.name == 'nt' else 'clear')
    start_time = datetime.now()
    running = True

    print(ASCII_HEADER)

    signal.signal(signal.SIGINT, handle_shutdown)
    signal.signal(signal.SIGTERM, handle_shutdown)
    atexit.register(cleanup)

    print_stylish("‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚≠ï S·¥õ·¥Ä Ä·¥õ…™…¥…¢ B·¥è·¥õ ‚≠ï\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n", Fore.CYAN)
    time.sleep(2)

    print_stylish("\r‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\nüèçÔ∏è C·¥è…¥…¥·¥á·¥Ñ·¥õ…™…¥…¢ T·¥è D·¥Ä·¥õ·¥Ä ô·¥Äs·¥á  üèÇ\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n", Fore.YELLOW)
    try:
        with Progress(
            TextColumn(f"{Fore.YELLOW}‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\nüèÇ C·¥è…¥…¥·¥á·¥Ñ·¥õ…™…¥…¢ T·¥è D·¥Ä·¥õ·¥Ä ô·¥Äs·¥á... üèÇ\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ{Style.RESET_ALL}"),
            BarColumn(),
            transient=True
        ) as progress:
            task = progress.add_task("", total=100)
            for _ in range(100):
                progress.update(task, advance=random.uniform(0.5, 2.5))
                time.sleep(random.uniform(0.01, 0.05))
    except Exception as e:
        logger.error(f"{Fore.RED}üí• D·¥Ä·¥õ·¥Ä ô·¥Äs·¥á C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ F·¥Ä…™ ü·¥á·¥Ö ‚û† {e}\n{traceback.format_exc()}\nT…™·¥ç·¥ás·¥õ·¥Ä·¥ç·¥ò ‚û† {datetime.now()}{Style.RESET_ALL}")
        print_stylish(f"D·¥Ä·¥õ·¥Ä ô·¥Äs·¥á E Ä Ä·¥è Ä ‚û†  {e} üòø", Fore.RED)
    time.sleep(2)

    file_info = (
        f"{Fore.MAGENTA}{Style.BRIGHT}‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\nüü¢      F…™ ü·¥á I…¥“ì·¥è  üü¢\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n"
        f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚îÉ V·¥á Äs…™·¥è…¥ ‚û† 0.1\n"
        f"‚îÉ F…™ ü·¥á A·¥ú·¥õ ú·¥è Ä ‚û† A Ä·¥ç·¥Ä…¥\n"
        f"‚îÉ A·¥ú·¥õ ú·¥è Ä E·¥ç·¥Ä…™ ü ‚û† armanhacker95@gmail.com\n"
        f"‚îÉ\n"
        f"‚îÉ ü§ñ T ú…™s F…™ ü·¥á M·¥Ä·¥Ö·¥á F·¥è Ä T·¥á ü·¥á…¢ Ä·¥Ä·¥ç B·¥è·¥õ ü§ñ\n"
        f"‚îÉ üî• D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä F·¥è·¥ú…¥·¥Ö O…¥ T·¥á ü·¥á…¢ Ä·¥Ä·¥ç üî•\n‚îÉ\n"
        f"‚îÉ D·¥á·¥† Us·¥á Ä…¥·¥Ä·¥ç·¥á ‚û† {BOT_OWNER} [ OFFLINE ] ( O·¥°…¥·¥á Ä O“ì“ì T ú…™s F…™ ü·¥á )\n‚îÉ\n"
        f"‚îÉ Ass…™s·¥õ·¥Ä…¥·¥õ ‚û† @Dev_x_Ninja\n"
        f"‚îÉ D·¥á·¥ç·¥è B·¥è·¥õ ‚û† {BOT_USERNAME}\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ{Style.RESET_ALL}\n"
    )
    print(f"\r{file_info}")
    print("\n\n")
    time.sleep(2)

    bot_status = (
        f"{Fore.GREEN}{Style.BRIGHT}‚Ä¢ B·¥è·¥õ Is R·¥ú…¥…¥…™…¥…¢ S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è üéâ\n"
        f"‚Ä¢ B·¥è·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ‚û† {BOT_USERNAME}\n"
        f"‚Ä¢ B·¥è·¥õ I·¥Ö ‚û† {BOT_ID}\n"
        f"‚Ä¢ B·¥è·¥õ O·¥°…¥·¥á Ä ‚û† {BOT_OWNER}{Style.RESET_ALL}"
    )
    print(bot_status)
    print("\n\n")
    time.sleep(2)

    print_stylish("‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚îÉ‚è≥ L·¥Ä·¥ú…¥·¥Ñ ú…™…¥…¢ U·¥ò·¥õ…™·¥ç·¥á C·¥è·¥ú…¥·¥õ·¥á Ä ‚è≥‚îÉ", Fore.CYAN)
    uptime_thread = threading.Thread(target=display_uptime, daemon=True)
    uptime_thread.start()

    print_stylish("‚îÉR·¥ú…¥…¥…™…¥…¢ P Ä·¥á-S·¥õ·¥Ä Ä·¥õ C ú·¥á·¥Ñ·¥ãs‚îÉ\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n", Fore.YELLOW)
    try:
        if not BOT_TOKEN:
            raise ValueError("‚Ä¢ B·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ …™s ·¥ç…™ss…™…¥…¢ √ó üòø")
        print_stylish("‚Ä¢ B·¥è·¥õ T·¥è·¥ã·¥á…¥ V·¥Ä ü…™·¥Ö·¥Ä·¥õ·¥á·¥Ö. ‚àö", Fore.GREEN)
    except Exception as e:
        logger.error(f"{Fore.RED}‚Ä¢ T·¥è·¥ã·¥á…¥ V·¥Ä ü…™·¥Ö·¥Ä·¥õ…™·¥è…¥ F·¥Ä…™ ü·¥á·¥Ö ‚û† {e}\n{traceback.format_exc()}\nT…™·¥ç·¥ás·¥õ·¥Ä·¥ç·¥ò ‚û† {datetime.now()}{Style.RESET_ALL}")
        print_stylish(f"T·¥è·¥ã·¥á…¥ E Ä Ä·¥è Ä ‚û† {e} üòø", Fore.RED)
        sys.exit(1)

    try:
        if not hasattr(bot, "infinity_polling"):
            raise AttributeError("‚Ä¢ B·¥è·¥õ …¥·¥è·¥õ …™…¥…™·¥õ…™·¥Ä ü…™·¥¢·¥á·¥Ö ·¥ò Ä·¥è·¥ò·¥á Ä ü è. √ó üòø")
        print_stylish("‚Ä¢ B·¥è·¥õ C·¥è…¥“ì…™…¢ V·¥Ä ü…™·¥Ö·¥Ä·¥õ·¥á·¥Ö ‚àö", Fore.GREEN)
    except Exception as e:
        logger.error(f"{Fore.RED}‚Ä¢ C·¥è…¥“ì…™…¢ V·¥Ä ü…™·¥Ö·¥Ä·¥õ…™·¥è…¥ F·¥Ä…™ ü·¥á·¥Ö ‚û† {e}\n{traceback.format_exc()}\nT…™·¥ç·¥ás·¥õ·¥Ä·¥ç·¥ò ‚û† {datetime.now()}{Style.RESET_ALL}")
        print_stylish(f"C·¥è…¥“ì…™…¢ E Ä Ä·¥è Ä ‚û† {e} üòø", Fore.RED)
        sys.exit(1)

    try:
        if not os.path.exists("logs"):
            os.makedirs("logs")
            print_stylish("‚Ä¢ C Ä·¥á·¥Ä·¥õ·¥á·¥Ö L·¥è…¢s D…™ Ä·¥á·¥Ñ·¥õ·¥è Ä è. üìÅ", Fore.GREEN)
    except Exception as e:
        logger.error(f"{Fore.RED}‚Ä¢ E…¥·¥†…™ Ä·¥è…¥·¥ç·¥á…¥·¥õ S·¥á·¥õ·¥ú·¥ò F·¥Ä…™ ü·¥á·¥Ö ‚û† {e}\n{traceback.format_exc()}\nT…™·¥ç·¥ás·¥õ·¥Ä·¥ç·¥ò ‚û† {datetime.now()}{Style.RESET_ALL}")
        print_stylish(f"E…¥·¥†…™ Ä·¥è…¥·¥ç·¥á…¥·¥õ E Ä Ä·¥è Ä ‚û† {e} üòø", Fore.RED)

    try:
        import telebot
        import rich
        import colorama
        print_stylish("‚Ä¢ A ü ü D·¥á·¥ò·¥á…¥·¥Ö·¥á…¥·¥Ñ…™·¥ás L·¥è·¥Ä·¥Ö·¥á·¥Ö. ‚àö\n\n", Fore.GREEN)
    except ImportError as e:
        logger.error(f"{Fore.RED}‚Ä¢ D·¥á·¥ò·¥á…¥·¥Ö·¥á…¥·¥Ñ è C ú·¥á·¥Ñ·¥ã F·¥Ä…™ ü·¥á·¥Ö  ‚û† {e}\n{traceback.format_exc()}\nT…™·¥ç·¥ás·¥õ·¥Ä·¥ç·¥ò ‚û† {datetime.now()}{Style.RESET_ALL}")
        print_stylish(f"‚ö†Ô∏è D·¥á·¥ò·¥á…¥·¥Ö·¥á…¥·¥Ñ è E Ä Ä·¥è Ä ‚û† {e} üòø", Fore.RED)
        sys.exit(1)

    print_stylish("‚Ä¢ S·¥õ·¥Ä Ä·¥õ…™…¥…¢ P·¥è ü ü…™…¥…¢.\n\n", Fore.MAGENTA)
    while running:
        try:
            bot.infinity_polling()
        except Exception as e:
            logger.error(
                f"{Fore.RED}P·¥è ü ü…™…¥…¢ E Ä Ä·¥è Ä ‚û† {e}\n"
                f"T è·¥ò·¥á ‚û† {type(e).__name__}\n"
                f"T…™·¥ç·¥ás·¥õ·¥Ä·¥ç·¥ò ‚û† {datetime.now()}\n"
                f"T Ä·¥Ä·¥Ñ·¥á ô·¥Ä·¥Ñ·¥ã ‚û† {traceback.format_exc()}\n"
                f"R·¥á·¥õ Ä è…™…¥…¢ I…¥ 10 S·¥á·¥Ñ·¥è…¥·¥Ös.{Style.RESET_ALL}"
            )
            print_stylish(f"‚Ä¢ P·¥è ü ü…™…¥…¢ C Ä·¥Äs ú·¥á·¥Ö. ‚û† {e} R·¥á·¥õ Ä è…™…¥…¢ I…¥ 10 S·¥á·¥Ñ·¥è…¥·¥Ös", Fore.RED)
            time.sleep(10)
        except KeyboardInterrupt:
            print_stylish("‚Ä¢ K·¥á è ô·¥è·¥Ä Ä·¥Ö I…¥·¥õ·¥á Ä Ä·¥ú·¥ò·¥õ! S ú·¥ú·¥õ·¥õ…™…¥…¢ D·¥è·¥°…¥. üõë", Fore.RED)
            running = False
            break
        except SystemExit:
            print_stylish("‚Ä¢ S ès·¥õ·¥á·¥ç Ex…™·¥õ! S ú·¥ú·¥õ·¥õ…™…¥…¢ D·¥è·¥°…¥. üõë", Fore.RED)
            running = False
            break
        finally:
            if not running:
                print_stylish("‚Ä¢ F…™…¥·¥Ä ü C ü·¥á·¥Ä…¥·¥ú·¥ò. üèÅ", Fore.YELLOW)
                try:
                    bot.stop_polling()
                    print_stylish("‚Ä¢ P·¥è ü ü…™…¥…¢ S·¥õ·¥è·¥ò·¥ò·¥á·¥Ö. üõë", Fore.GREEN)
                except Exception as e:
                    logger.error(f"{Fore.RED}‚Ä¢ C ü·¥á·¥Ä…¥·¥ú·¥ò E Ä Ä·¥è Ä ‚û† {e}\n{traceback.format_exc()}\nT…™·¥ç·¥ás·¥õ·¥Ä·¥ç·¥ò ‚û† {datetime.now()}{Style.RESET_ALL}")
                    print_stylish(f"‚ö†Ô∏è C ü·¥á·¥Ä…¥·¥ú·¥ò E Ä Ä·¥è Ä ‚û† {e} üòø", Fore.RED)

    print_stylish("‚Ä¢ B·¥è·¥õ H·¥Äs S·¥õ·¥è·¥ò·¥ò·¥á·¥Ö. U…¥·¥õ…™ ü N·¥áx·¥õ T…™·¥ç·¥á. üõë", Fore.CYAN)

if __name__ == '__main__':
    start_bot()